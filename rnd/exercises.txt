In [1]: 3 + 2 * 4
Out[1]: 11

In [2]: 3 +2 *4+2
Out[2]: 13

In [3]: _
Out[3]: 13

In [4]: _ * 12
Out[4]: 156

In [5]: 1+10+3*23
Out[5]: 80

In [6]: 1+10+3*23 +2 / 12
Out[6]: 80.16666666666667

In [9]: y=123

In [10]: z=938

In [11]: print(id(y))
139808671320320

In [12]: print(id(z))
139808549867376

In [13]: z=y

In [14]: print(id(z))
139808671320320

In [15]: y="prax"

In [16]: print(id(y))
139808549404488

In [17]: print(id(z))
139808671320320

In [18]: z
Out[18]: 123

In [19]: y
Out[19]: 'prax'

In [27]: w
Out[27]: 'A String in triple quotes can extend\nover multiple lines like this one, and can contain\n\'single\' and "double" quotes.'

In [28]: w[1]
Out[28]: ' '

In [29]: w[20]
Out[29]: 'u'

In [30]: len(w)
Out[30]: 117

In [31]: w[-1]
Out[31]: '.'

In [32]: w[-2]
Out[32]: 's'

In [33]: w[len(w)-2]
Out[33]: 's'

In [34]: w[len(w)-4]
Out[34]: 't'

In [35]: w[1:len(w)-4]
Out[35]: ' String in triple quotes can extend\nover multiple lines like this one, and can contain\n\'single\' and "double" quo'

In [36]: "PRAX" *2
Out[36]: 'PRAXPRAX'

In [40]: w[1:-110]
Out[40]: ' Strin'

## Shallow copy

In [41]: list1 = ['a','b','c','d']

In [42]: list2 = list1[:]

In [43]: list1
Out[43]: ['a', 'b', 'c', 'd']

In [44]: list2
Out[44]: ['a', 'b', 'c', 'd']

In [45]: list2[3]='prax'

In [46]: list2
Out[46]: ['a', 'b', 'c', 'prax']

In [47]: list1
Out[47]: ['a', 'b', 'c', 'd']

-------------

## Example of regular copy of lists

In [65]: lst=['a', 'b', 'c', 'prax']

In [66]: lst2=lst

In [67]: lst2
Out[67]: ['a', 'b', 'c', 'prax']

In [68]: lst2[3]='fist'

In [69]: lst
Out[69]: ['a', 'b', 'c', 'fist']

In [70]: lst2
Out[70]: ['a', 'b', 'c', 'fist']

-----------------------------

# EXample of copying with list having sublists

In [48]: lst1 = ['a','b',['ab','ba']]

In [49]: lst2 = lst1[:]

In [50]: lst2
Out[50]: ['a', 'b', ['ab', 'ba']]

In [51]: lst1
Out[51]: ['a', 'b', ['ab', 'ba']]

In [53]: lst2[2][0]='c'

In [54]: lst2
Out[54]: ['a', 'b', ['c', 'ba']]

In [55]: lst1
Out[55]: ['a', 'b', ['c', 'ba']]

## Example of deepcopy

In [56]: from copy import deepcopy

In [57]: lst1 = ['a','b',['ab','ba']]

In [58]: lst2 = deepcopy(lst1)

In [59]: lst1
Out[59]: ['a', 'b', ['ab', 'ba']]

In [60]: lst2
Out[60]: ['a', 'b', ['ab', 'ba']]

In [62]: lst2[2][0]='c'

In [63]: lst2
Out[63]: ['a', 'b', ['c', 'ba']]

In [64]: lst1
Out[64]: ['a', 'b', ['ab', 'ba']]


----------------
fibonacci series

In [27]: n = input("enter the higher limit: ")
    ...: currval = 0
    ...: nextval = 1
    ...: totalval = 0
    ...: for a in range(1,int(n)+1):
    ...:     print(totalval)
    ...:     totalval = currval + nextval
    ...:     nextval = currval
    ...:     currval = totalval


## Palindrome
print(True if 'MALAYALAM' == 'MALAYALAM'[::-1] else False)

## String slicing examples
In [265]: string='PRASHANT'

In [272]: len(string)
Out[272]: 8

## [P][R][A][S][H][A][N][T]
## character from l-r
##  0  1  2  3  4  5  6  7
## character position
##  1  2  3  4  5  6  7  8
## character from r-l
##  -8 -7 -6 -5 -4 -3 -2 -1

## [T][N][A][H][S][A][R][P]
## character from r-l
##  -8 -7 -6 -5 -4 -3 -2 -1


## Start at the position mentioned in the first slice
## and go till the end of the string
In [268]: string[len(string)-len(string)::]
Out[268]: 'PRASHANT'

## Start at the 2nd character (string[2]) and go till the end
In [279]: string[2::]
Out[279]: 'ASHANT'

## String at the -1 st position, i.e. start from the last character
In [269]: string[len(string)-len(string)-1::]
Out[269]: 'T'

## String at the -2nd position (start from last-but-one position in the string)
In [270]: string[len(string)-len(string)-2::]
Out[270]: 'NT'

## start from last-but-fifth position in the string)
In [271]: string[len(string)-len(string)-5::]
Out[271]: 'SHANT'

## start from 1st character of the string, i.e.string[1] and stop at the 2nd position
In [276]: string[1:2:]
Out[276]: 'R'

## Start from 2nd character and stop at the 6th character position
In [277]: string[2:6:]
Out[277]: 'ASHA'

## String reversal
In [278]: string[::-1]
Out[278]: 'TNAHSARP'

## First 3 characters starting from the 1st position
In [259]: 'PRASHANT'[-8:3:]
Out[259]: 'PRA'

In [282]: 'PRASHANT'[-7:3:]
Out[282]: 'RA'

## Skip the last character and start after 3rd character
In [281]: string[:3:-1]
Out[281]: 'TNAH'

## Skip the last character and start after 0th character
In [322]: string[:0:-1]
Out[322]: 'TNAHSAR'

## Skip 2 characters
In [310]: string[::2]
Out[310]: 'PAHN'

##################################33

##environment variables

In [325]: import os

In [326]: print(os.environ.get('PYTHONPATH'))
:/home/prashant/python_code/src:/home/prashant/python_code/src/config:/home/prashant/python_code/src/databaseConn:/home/prashant/python_code/src/mysqlexamples:/home/prashant/python_code/src/postgresexamples:/home/prashant/python_code/src/oracleexamples:/home/prashant/python_code/src/sqlliteexamples:/home/prashant/mysite:/home/prashant/mysite/polls:/home/prashant/python_code/src/flask_example:/home/prashant/python_code/src/flask_example/personal:/home/prashant/python_code/src/flask_example/fab-masterdetail:/home/prashant/python_code/src/flask_example/fab-masterdetail/app:/home/prashant/python_code/src/exercise:/home/prashant/python_code/src/exercise/subpackage:/home/prashant/anaconda3/bin:/home/prashant/scripts:/u01/app/oracle/product/12/dbhome_1/bin:/usr/sbin:/home/prashant/scripts:/home/prashant/bin:/home/prashant/.local/bin:/usr/share/java/mongo-java-driver-3.0.4.jar:/home/prashant/eclipse-workspace/javaproject/build/classes/main:/jlib:/rdbms/jlib:/bin:/home/prashant/.npm-global/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

In [327]: print(os.environ.get('ORACLE_HOME'))
/u01/app/oracle/product/12/dbhome_1
